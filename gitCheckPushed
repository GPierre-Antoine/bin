#!/bin/bash

set -euo pipefail

usage() {
  echo "gitCheckPushed [ -q | --quiet ] <gitdir...> [ --format <format repo> <format commit>]"
  documentation=(
    "gitdir : target git directory"
    "format : how to print repos and commits, printf syntax"
  )
  printf "  Â» %s\n" "${documentation[@]}"
}

quiet=false
folderList=()
customRepoFormat="%s\n"
customCommitFormat="  %s\n"
customEOL="\n"
while [ "$#" -gt 0 ]; do
  case "$1" in
  "-q" | "--quiet")
    quiet=true
    ;;
  "-h" | "--help")
    usage
    exit
    ;;
  "--format")
    if [ "$#" -lt 4 ]; then
      exitError 2 "format : not enough parameters"
    fi
    customRepoFormat=$2
    customCommitFormat=$3
    customEOL=$4
    shift 3
    ;;
  *)
    folderList+=("${1%/}/")
    ;;

  esac
  shift
done

if [ -z "${folderList[*]}" ]; then
  folderList=("$PWD")
fi

gitRepo=()
for folder in "${folderList[@]}"; do
  if [ -d "$folder/.git" ]; then
    gitRepo+=("$folder")
  fi
done

if [ -z "${gitRepo[*]}" ]; then
  exitError 3 "No git repository in arg list"
fi

checkLog() {
  git -C "$1" log --branches --not --remotes --oneline
}

quietPrintf() {
  if ! $quiet; then
    # shellcheck disable=SC2059
    printf "$@"
  fi
}

success=true
for repo in "${gitRepo[@]}"; do
  quietPrintf "$customRepoFormat" "$repo"
  while read -r line; do
    success=false
    quietPrintf "$customCommitFormat" "$line"
  done < <(checkLog "$repo")
  quietPrintf "$customEOL"
done

if $success; then
  exit 0
fi

exit 1
